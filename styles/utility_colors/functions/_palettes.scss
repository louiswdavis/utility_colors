@use "sass:color";
@use "sass:math";
@use "sass:map";

$_brightness-step: 10%;
$_saturation-step: 2%;

// ? Single Colour's Palette
// a function to create a colour shade palette based off a single color input
// the key is the name of the colour and the value is it's colour
@function single-color-palette($key, $value) {
  $single-color-palette: ();

  $light-index: math.floor(math.div(color.lightness($value), 10%));
  // colours are index inversely to their lightness
  // so a colour with a high lightness will have a low shade index and vice verse for a low lightness (dark) colour

  // add the base colour with it's respective shade integer
  $single-color-palette: map-merge($single-color-palette, (#{$key + '-' + calc(9 - $light-index) + '00'}: $value));

  // Darker colours
  // calc the space available to create darkened colours based off the base colour
  @for $i from 1 through $light-index {
    $col: darken($value, $i * $_brightness-step);
    $col: saturate($col, $i * $_saturation-step);
    $shade-index: 9 - math.floor(math.div(color.lightness($col), 10%));

    // add the darkened colour to the main list and index it with it's shade
    $single-color-palette: map-merge($single-color-palette, (#{$key + '-' + calc($shade-index) + '00'}: $col));
  }

  // Lighter colours
  // calc the space available to create lightened colours based off the base colour
  @for $i from 1 through 9 - $light-index {
    $col: lighten($value, $i * $_brightness-step);
    $col: desaturate($col, $i * $_saturation-step);
    $shade-index: 9 - math.floor(math.div(color.lightness($col), 10%));

    // add the lightened colour to the main list and index it with it's shade
    @if $shade-index == 0 {
      $single-color-palette: map-merge($single-color-palette, (#{$key + '-50'}: $col));
    } @else {
      $single-color-palette: map-merge($single-color-palette, (#{$key + '-' + calc($shade-index) + '00'}: $col));
    }
  }

  @return $single-color-palette;
}


// ? Multiple Colour's Palette
// a function to loop through a map of colours and create shade palettes for them all and collect this into a single map
@function multi-color-palette($color-map) {
  $multi-color-palette: ();
  
  @each $key, $value in $color-map {
    // create a palette for a single colour from the providing mapping
    $new-palette: single-color-palette($key, $value);

    // merge the colours shade palette into the collective mapping
    $multi-color-palette: map-merge($multi-color-palette, $new-palette);
  }

  @return $multi-color-palette;
}


// ? Single Colour's Trio Palette
// a function to create a trio shade palette based off a single color input
// the key is the name of the colour and the value is it's colour
@function single-color-trio($key, $value) {
  $single-color-trio: ();

  // $light-index: math.floor(math.div(color.lightness($value), 10%));
  // to check if there is light space on either side of the colour for the palette

  // add the base colour with it's respective shade integer
  $single-color-trio: map-merge($single-color-trio, (#{$key}: $value));

  // Darker colour
  $col: darken($value, ($_brightness-step * 2));
  $col: saturate($col, ($_saturation-step * 2));

  // add the darkened colour to the trio list
  $single-color-trio: map-merge($single-color-trio, (#{$key + '-dark'}: $col));

  // Lighter colour
  $col: lighten($value, ($_brightness-step * 2));
  $col: desaturate($col, ($_saturation-step * 2));

  // add the lightened colour to the trio list
  $single-color-trio: map-merge($single-color-trio, (#{$key + '-light'}: $col));

  @return $single-color-trio;
}

// ? Multiple Colour's Trio Palette
// a function to loop through a map of colours and create trio shade palettes for them all and collect this into a single map
@function multi-color-trio($color-map) {
  $multi-color-trio: ();
  
  @each $key, $value in $color-map {
    // create a palette for a single colour from the providing mapping
    $new-trio: single-color-trio($key, $value);

    // merge the colours shade palette into the collective mapping
    $multi-color-trio: map-merge($multi-color-trio, $new-trio);
  }

  @return $multi-color-trio;
}
