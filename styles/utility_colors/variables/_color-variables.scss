@use "sass:map";
@use "sass:meta";

// Color Palettes

$base-colors: (
  'red': hsl(0, 94%, 55%),
  'tomato': #e34132,
  'tiger': hsl(10, 92%, 55%),
  'orange': hsl(31, 90%, 55%),
  'curry': hsl(43, 93%, 54%),
  'yellow': hsl(48, 90%, 55%),
  'green': hsl(100, 94%, 57%),
  'emerald': hsl(166, 93%, 57%),
  'capri': hsl(197, 90%, 56%),
  'blue': hsl(204, 99%, 56%),
  'violet': hsl(256, 87%, 57%),
  'purple': hsl(269, 85%, 56%),
  'pink': hsl(320, 98%, 66%),
  'satin': hsl(348, 86%, 57%),
  'cement': hsl(42, 9%, 87%),
  'grey': hsl(0, 3%, 46%),
  'base': hsl(0, 3%, 46%),
);

$base-colors-palette: multi-color-palette($base-colors);

$color-shades: (
  'white': #fff,
  'black': #000,
  translucent: rgba(#000, 0.45),
);

$all-colors: map-combine(
  $base-colors-palette,
  $color-shades,
);

@function get-color($color-name) {
  @if map-has-key($all-colors, #{$color-name}) {
    @return map.get($all-colors, #{$color-name});
  } @else {
    @error "ERROR: Couldn't find Color";
  }
};

// Color Roles

// Can use either the brand colours or ones from the colour palette

// @if variable-exists("all-brand-colors") {
//   @debug 'aaaaa';
// } @else {
//   @debug 'bbbbbb';
// }

// $key-colors: (
//   primary: get-brand-color(primary-brand),
//   secondary: get-brand-color(secondary-brand),
//   tertiary: get-brand-color(tertiary-brand),
// );

// $key-colors-trio: multi-color-trio($key-colors);

$role-colors: (
  success: get-color(green-400),
  danger: get-color(red-400),
  information: get-color(blue-400),
  warning: get-color(yellow-400),
);

$role-colors-trio: multi-color-trio($role-colors);

// $all-colors: map-combine(
//   $all-colors,
//   $key-colors-trio,
//   $role-colors-trio,
// );

$all-colors: map-combine(
  $all-colors,
  $role-colors-trio,
);
